version: '3.8'

services:
  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: cortex-chromadb
    ports:
      - "8003:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - cortex-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: cortex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - cortex-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for API key management (optional)
  postgres:
    image: postgres:15-alpine
    container_name: cortex-postgres
    environment:
      - POSTGRES_USER=cortex
      - POSTGRES_PASSWORD=cortex_password
      - POSTGRES_DB=cortex
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cortex-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cortex"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cortex API Server
  cortex-server:
    build:
      context: .
      dockerfile: server/Dockerfile
    container_name: cortex-api-server
    ports:
      - "8080:8080"   # HTTP API
      - "50051:50051" # gRPC
      - "9090:9090"   # Metrics
    environment:
      - APP_NAME=Cortex Memory API Server
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8080
      - WORKERS=4
      - SECRET_KEY=${SECRET_KEY:-change-this-in-production}
      - API_KEYS=${API_KEYS:-dev-key-1,dev-key-2}
      - DATABASE_URL=postgresql+asyncpg://cortex:cortex_password@postgres/cortex
      - REDIS_URL=redis://redis:6379/0
      - RATE_LIMIT_PER_MINUTE=100
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CORTEX_MODEL_NAME=text-embedding-3-small
      - CORTEX_LLM_BACKEND=openai
      - CORTEX_LLM_MODEL=gpt-4o-mini
      - CORTEX_STM_CAPACITY=100
      - CORTEX_ENABLE_SMART_COLLECTIONS=true
      - CORTEX_ENABLE_BACKGROUND_PROCESSING=true
      - CHROMA_URI=http://chromadb:8000
      - GRPC_SERVER_PORT=50051
      - ENABLE_METRICS=true
      - LOG_LEVEL=INFO
    depends_on:
      - chromadb
      - redis
      - postgres
    networks:
      - cortex-network
    volumes:
      - ./server:/app/server
      - ./cortex:/app/cortex:ro
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: cortex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - cortex-server
    networks:
      - cortex-network
    restart: unless-stopped

networks:
  cortex-network:
    driver: bridge

volumes:
  chroma_data:
  redis_data:
  postgres_data: