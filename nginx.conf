user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_status 429;

    # Upstream servers
    upstream cortex_api {
        server cortex-server:8080;
    }

    upstream cortex_grpc {
        server cortex-server:50051;
    }

    # HTTP server - redirect to HTTPS in production
    server {
        listen 80;
        server_name localhost;

        # For production, uncomment to redirect to HTTPS
        # return 301 https://$server_name$request_uri;

        # API endpoints
        location / {
            proxy_pass http://cortex_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for interactive docs
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
        }

        # Health check endpoint (no rate limiting)
        location /health {
            proxy_pass http://cortex_api/health;
            access_log off;
        }

        # Metrics endpoint (internal only)
        location /metrics {
            proxy_pass http://cortex_api/metrics;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }

    # HTTPS server (uncomment for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #
    #     # Same location blocks as HTTP server
    #     location / {
    #         proxy_pass http://cortex_api;
    #         # ... same proxy settings ...
    #     }
    # }
}

# gRPC proxy configuration
stream {
    upstream grpc_backend {
        server cortex-server:50051;
    }

    server {
        listen 50051;
        proxy_pass grpc_backend;
        proxy_connect_timeout 60s;
        proxy_timeout 300s;
    }
}